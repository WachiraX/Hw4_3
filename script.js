document.addEventListener("DOMContentLoaded", loadAppointments);

function formatDate(dateString) {
    const [year, month, day] = dateString.split("-");
    return `${day}/${month}/${year}`;
}

function isOverlapping(newStart, newEnd, existingStart, existingEnd) {
    return newStart < existingEnd && newEnd > existingStart;
}

function createAppointment() {
    const title = document.getElementById("title").value;
    const date = document.getElementById("date").value;
    const startTime = document.getElementById("startTime").value;
    const endTime = document.getElementById("endTime").value;

    if (!title || !date || !startTime || !endTime) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
        return;
    }

    const formattedDate = formatDate(date);
    const now = new Date();
    const appointmentDate = new Date(date + "T" + startTime);
    const status = appointmentDate < now ? "‚ùå ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" : "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß";

    let appointments = JSON.parse(localStorage.getItem("appointments")) || [];
    let isConflict = false;

    const newStartTime = new Date(`${date}T${startTime}`);
    const newEndTime = new Date(`${date}T${endTime}`);

    appointments.forEach(app => {
        const existingStart = new Date(`${date}T${app.startTime}`);
        const existingEnd = new Date(`${date}T${app.endTime}`);

        if (app.date === formattedDate && isOverlapping(newStartTime, newEndTime, existingStart, existingEnd)) {
            isConflict = true;
        }
    });

    const finalStatus = isConflict ? `‚ö†Ô∏è ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô - ${status}` : status;

    const appointment = {
        id: Date.now().toString(),
        title,
        date: formattedDate,
        startTime,
        endTime,
        status: finalStatus,
        cancelled: false,
        isConflict
    };

    appointments.push(appointment);
    localStorage.setItem("appointments", JSON.stringify(appointments));

    loadAppointments();
}

function loadAppointments() {
    const tableBody = document.querySelector("#appointmentTable tbody");
    tableBody.innerHTML = "";

    let appointments = JSON.parse(localStorage.getItem("appointments")) || [];
    appointments.forEach((appointment) => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${appointment.date}</td>
            <td>${appointment.startTime}</td>
            <td>${appointment.endTime}</td>
            <td>${appointment.title}</td>
            <td>${appointment.cancelled ? "üö´ ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" : appointment.status}</td>
            <td>
                <button class="cancel-btn" onclick="cancelAppointment('${appointment.id}')">üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
            </td>
            <td>
                <button class="delete-btn" onclick="deleteAppointment('${appointment.id}')">üóëÔ∏è ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á</button>
            </td>
        `;

        if (appointment.status.includes("‚ùå ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")) {
            row.classList.add("past-appointment");
        }
        if (appointment.isConflict) {
            row.classList.add("conflict-appointment");
        }
        if (appointment.cancelled) {
            row.classList.add("cancelled-appointment");
        }

        tableBody.appendChild(row);
    });
}

function cancelAppointment(id) {
    let appointments = JSON.parse(localStorage.getItem("appointments")) || [];
    appointments = appointments.map(app => {
        if (app.id === id) app.cancelled = true;
        return app;
    });
    localStorage.setItem("appointments", JSON.stringify(appointments));

    loadAppointments();
}

function deleteAppointment(id) {
    let appointments = JSON.parse(localStorage.getItem("appointments")) || [];
    appointments = appointments.filter(app => app.id !== id);
    localStorage.setItem("appointments", JSON.stringify(appointments));

    loadAppointments();
}

function clearAppointments() {
    if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?")) {
        localStorage.removeItem("appointments");
        alert("‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        location.reload();
    }
}